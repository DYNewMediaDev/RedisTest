<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

	<bean id="SpringContextUtil" class="utils.SpringContextUtil"
		scope="singleton" />

	<!-- 加载redis配置文件 -->
	<context:property-placeholder location="classpath:redis.properties" />

	<!-- 扫描service层 -->
	<context:component-scan base-package="service" />

	<!-- redis连接池的配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
	</bean>

	<!-- redis的连接池pool -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" />
		<constructor-arg index="3" value="${redis.pool.maxWait}" />
		<!-- <constructor-arg index="4" value="${redis.password}" /> -->
	</bean>

	<bean name="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!--单机 -->
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<!--<property name="password" value="${redis.password}"/> -->

		<!--cluster集群 -->
		<!--<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/> -->

		<!--sentinel哨兵 -->
		<!--<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"/> -->
	</bean>

	<bean name="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<!-- redis sentinel -->
	<bean id="redisSentinelConfiguration"
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<constructor-arg index="0" value="mymaster" />
		<!-- sentinel hostAndPort set -->
		<constructor-arg index="1">
			<set>
				<value>192.168.190.128:26379</value>
			</set>
		</constructor-arg>
	</bean>

	<!-- redis cluster -->
	<bean id="redisClusterConfiguration"
		class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<constructor-arg name="clusterNodes">
			<list>
				<value>127.0.0.1:7000</value>
				<value>127.0.0.1:7001</value>
				<value>127.0.0.1:7002</value>
				<value>127.0.0.1:7003</value>
				<value>127.0.0.1:7004</value>
				<value>127.0.0.1:7005</value>
			</list>
		</constructor-arg>
	</bean>

	<bean id="messageListener" class="queue2.JobListener">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<bean id="topicContainer"
		class="org.springframework.data.redis.listener.RedisMessageListenerContainer"
		destroy-method="destroy">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="taskExecutor"><!-- 此处有个奇怪的问题，无法正确使用其他类型的Executor -->
			<bean
				class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
				<property name="poolSize" value="3"></property>
			</bean>
		</property>
		<property name="messageListeners">
			<map>
				<entry key-ref="messageListener">
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="user:topic" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<!--redis缓存配置 纯代码配置也行 -->
	<bean id="userKeyGenerator"
		class="org.springframework.cache.interceptor.SimpleKeyGenerator" />

	<bean name="cacheManager"
		class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate" />
		<!--设置过期时间300s 默认为0,不过期 -->
		<property name="defaultExpiration" value="300" />
		<!--可以为单独缓存value设置过期时间 -->
		<property name="expires">
			<map>
				<entry key="defaultCache" value="3600" />
			</map>
		</property>
	</bean>

	<cache:annotation-driven cache-manager="cacheManager"
		proxy-target-class="true" key-generator="userKeyGenerator" />

	<!-- <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager"> 
		<property name="cacheManagers"> <list> <ref bean="concurrentMapCacheManager"/> 
		<ref bean="guavaCacheManager"/> </list> </property> &lt;!&ndash; 都找不到时，不返回null，而是返回NOP的Cache 
		&ndash;&gt; <property name="fallbackToNoOpCache" value="true"/> </bean> -->
</beans>